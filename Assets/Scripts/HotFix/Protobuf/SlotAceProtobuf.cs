// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SlotAceProtobuf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SlotAceProtobuf {

  /// <summary>Holder for reflection information generated from SlotAceProtobuf.proto</summary>
  public static partial class SlotAceProtobufReflection {

    #region Descriptor
    /// <summary>File descriptor for SlotAceProtobuf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SlotAceProtobufReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVTbG90QWNlUHJvdG9idWYucHJvdG8SD1Nsb3RBY2VQcm90b2J1ZiL/AgoI",
            "TWFpblBhY2sSMQoLUmVxdWVzdENvZGUYASABKA4yHC5TbG90QWNlUHJvdG9i",
            "dWYuUmVxdWVzdENvZGUSLwoKQWN0aW9uQ29kZRgCIAEoDjIbLlNsb3RBY2VQ",
            "cm90b2J1Zi5BY3Rpb25Db2RlEi8KClJldHVybkNvZGUYAyABKA4yGy5TbG90",
            "QWNlUHJvdG9idWYuUmV0dXJuQ29kZRItCglMb2dpblBhY2sYBCABKAsyGi5T",
            "bG90QWNlUHJvdG9idWYuTG9naW5QYWNrEjMKDFVzZXJJbmZvUGFjaxgFIAEo",
            "CzIdLlNsb3RBY2VQcm90b2J1Zi5Vc2VySW5mb1BhY2sSOQoPU3BpblJlcXVl",
            "c3RQYWNrGAYgASgLMiAuU2xvdEFjZVByb3RvYnVmLlNwaW5SZXF1ZXN0UGFj",
            "axI/ChJTcGluUmVzdWx0TGlzdFBhY2sYByABKAsyIy5TbG90QWNlUHJvdG9i",
            "dWYuU3BpblJlc3VsdExpc3RQYWNrIi0KCUxvZ2luUGFjaxIOCgZVc2VySWQY",
            "ASABKAkSEAoITmlja25hbWUYAiABKAkiLgoMVXNlckluZm9QYWNrEgwKBENv",
            "aW4YASABKAUSEAoIRnJlZVNwaW4YAiABKAUiIwoPU3BpblJlcXVlc3RQYWNr",
            "EhAKCEJldFZhbHVlGAEgASgFIk0KElNwaW5SZXN1bHRMaXN0UGFjaxI3Cg5T",
            "cGluUmVzdWx0TGlzdBgBIAMoCzIfLlNsb3RBY2VQcm90b2J1Zi5TcGluUmVz",
            "dWx0UGFjayKiAQoOU3BpblJlc3VsdFBhY2sSEgoKU3BpblJlc3VsdBgBIAMo",
            "BRIVCg1Hb2xkSW5kZXhMaXN0GAIgAygFEhQKDFdpbkluZGV4TGlzdBgDIAMo",
            "BRI9ChNCaWdXaWxkRGF0YVBhY2tMaXN0GAQgAygLMiAuU2xvdEFjZVByb3Rv",
            "YnVmLkJpZ1dpbGREYXRhUGFjaxIQCghXaW5WYWx1ZRgFIAEoBSI7Cg9CaWdX",
            "aWxkRGF0YVBhY2sSEQoJTWFpbkluZGV4GAEgASgFEhUKDUNvcHlJbmRleExp",
            "c3QYAiADKAUqMgoLUmVxdWVzdENvZGUSDwoLUmVxdWVzdE5vbmUQABIICgRV",
            "c2VyEAESCAoER2FtZRACKkIKCkFjdGlvbkNvZGUSDgoKQWN0aW9uTm9uZRAA",
            "EgkKBUxvZ2luEAESDwoLR2V0VXNlckluZm8QAhIICgRTcGluEAMqRwoKUmV0",
            "dXJuQ29kZRIOCgpSZXR1cm5Ob25lEAASCwoHU3VjY2VlZBABEggKBEZhaWwQ",
            "AhISCg5EdXBsaWNhdGVMb2dpbhADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SlotAceProtobuf.RequestCode), typeof(global::SlotAceProtobuf.ActionCode), typeof(global::SlotAceProtobuf.ReturnCode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.MainPack), global::SlotAceProtobuf.MainPack.Parser, new[]{ "RequestCode", "ActionCode", "ReturnCode", "LoginPack", "UserInfoPack", "SpinRequestPack", "SpinResultListPack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.LoginPack), global::SlotAceProtobuf.LoginPack.Parser, new[]{ "UserId", "Nickname" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.UserInfoPack), global::SlotAceProtobuf.UserInfoPack.Parser, new[]{ "Coin", "FreeSpin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.SpinRequestPack), global::SlotAceProtobuf.SpinRequestPack.Parser, new[]{ "BetValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.SpinResultListPack), global::SlotAceProtobuf.SpinResultListPack.Parser, new[]{ "SpinResultList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.SpinResultPack), global::SlotAceProtobuf.SpinResultPack.Parser, new[]{ "SpinResult", "GoldIndexList", "WinIndexList", "BigWildDataPackList", "WinValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SlotAceProtobuf.BigWildDataPack), global::SlotAceProtobuf.BigWildDataPack.Parser, new[]{ "MainIndex", "CopyIndexList" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    /// 用戶
    /// </summary>
    [pbr::OriginalName("User")] User = 1,
    /// <summary>
    /// 遊戲
    /// </summary>
    [pbr::OriginalName("Game")] Game = 2,
  }

  /// <summary>
  /// 執行方法名稱
  /// </summary>
  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    [pbr::OriginalName("Login")] Login = 1,
    [pbr::OriginalName("GetUserInfo")] GetUserInfo = 2,
    [pbr::OriginalName("Spin")] Spin = 3,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    /// 成功
    /// </summary>
    [pbr::OriginalName("Succeed")] Succeed = 1,
    /// <summary>
    /// 失敗
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    /// 重複登入
    /// </summary>
    [pbr::OriginalName("DuplicateLogin")] DuplicateLogin = 3,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestCode_ = other.requestCode_;
      actionCode_ = other.actionCode_;
      returnCode_ = other.returnCode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      userInfoPack_ = other.userInfoPack_ != null ? other.userInfoPack_.Clone() : null;
      spinRequestPack_ = other.spinRequestPack_ != null ? other.spinRequestPack_.Clone() : null;
      spinResultListPack_ = other.spinResultListPack_ != null ? other.spinResultListPack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "RequestCode" field.</summary>
    public const int RequestCodeFieldNumber = 1;
    private global::SlotAceProtobuf.RequestCode requestCode_ = global::SlotAceProtobuf.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.RequestCode RequestCode {
      get { return requestCode_; }
      set {
        requestCode_ = value;
      }
    }

    /// <summary>Field number for the "ActionCode" field.</summary>
    public const int ActionCodeFieldNumber = 2;
    private global::SlotAceProtobuf.ActionCode actionCode_ = global::SlotAceProtobuf.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.ActionCode ActionCode {
      get { return actionCode_; }
      set {
        actionCode_ = value;
      }
    }

    /// <summary>Field number for the "ReturnCode" field.</summary>
    public const int ReturnCodeFieldNumber = 3;
    private global::SlotAceProtobuf.ReturnCode returnCode_ = global::SlotAceProtobuf.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.ReturnCode ReturnCode {
      get { return returnCode_; }
      set {
        returnCode_ = value;
      }
    }

    /// <summary>Field number for the "LoginPack" field.</summary>
    public const int LoginPackFieldNumber = 4;
    private global::SlotAceProtobuf.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "UserInfoPack" field.</summary>
    public const int UserInfoPackFieldNumber = 5;
    private global::SlotAceProtobuf.UserInfoPack userInfoPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.UserInfoPack UserInfoPack {
      get { return userInfoPack_; }
      set {
        userInfoPack_ = value;
      }
    }

    /// <summary>Field number for the "SpinRequestPack" field.</summary>
    public const int SpinRequestPackFieldNumber = 6;
    private global::SlotAceProtobuf.SpinRequestPack spinRequestPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.SpinRequestPack SpinRequestPack {
      get { return spinRequestPack_; }
      set {
        spinRequestPack_ = value;
      }
    }

    /// <summary>Field number for the "SpinResultListPack" field.</summary>
    public const int SpinResultListPackFieldNumber = 7;
    private global::SlotAceProtobuf.SpinResultListPack spinResultListPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SlotAceProtobuf.SpinResultListPack SpinResultListPack {
      get { return spinResultListPack_; }
      set {
        spinResultListPack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestCode != other.RequestCode) return false;
      if (ActionCode != other.ActionCode) return false;
      if (ReturnCode != other.ReturnCode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if (!object.Equals(UserInfoPack, other.UserInfoPack)) return false;
      if (!object.Equals(SpinRequestPack, other.SpinRequestPack)) return false;
      if (!object.Equals(SpinResultListPack, other.SpinResultListPack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestCode != global::SlotAceProtobuf.RequestCode.RequestNone) hash ^= RequestCode.GetHashCode();
      if (ActionCode != global::SlotAceProtobuf.ActionCode.ActionNone) hash ^= ActionCode.GetHashCode();
      if (ReturnCode != global::SlotAceProtobuf.ReturnCode.ReturnNone) hash ^= ReturnCode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (userInfoPack_ != null) hash ^= UserInfoPack.GetHashCode();
      if (spinRequestPack_ != null) hash ^= SpinRequestPack.GetHashCode();
      if (spinResultListPack_ != null) hash ^= SpinResultListPack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestCode != global::SlotAceProtobuf.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestCode);
      }
      if (ActionCode != global::SlotAceProtobuf.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActionCode);
      }
      if (ReturnCode != global::SlotAceProtobuf.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ReturnCode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LoginPack);
      }
      if (userInfoPack_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserInfoPack);
      }
      if (spinRequestPack_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SpinRequestPack);
      }
      if (spinResultListPack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SpinResultListPack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestCode != global::SlotAceProtobuf.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestCode);
      }
      if (ActionCode != global::SlotAceProtobuf.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionCode);
      }
      if (ReturnCode != global::SlotAceProtobuf.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReturnCode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (userInfoPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfoPack);
      }
      if (spinRequestPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpinRequestPack);
      }
      if (spinResultListPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpinResultListPack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.RequestCode != global::SlotAceProtobuf.RequestCode.RequestNone) {
        RequestCode = other.RequestCode;
      }
      if (other.ActionCode != global::SlotAceProtobuf.ActionCode.ActionNone) {
        ActionCode = other.ActionCode;
      }
      if (other.ReturnCode != global::SlotAceProtobuf.ReturnCode.ReturnNone) {
        ReturnCode = other.ReturnCode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::SlotAceProtobuf.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      if (other.userInfoPack_ != null) {
        if (userInfoPack_ == null) {
          UserInfoPack = new global::SlotAceProtobuf.UserInfoPack();
        }
        UserInfoPack.MergeFrom(other.UserInfoPack);
      }
      if (other.spinRequestPack_ != null) {
        if (spinRequestPack_ == null) {
          SpinRequestPack = new global::SlotAceProtobuf.SpinRequestPack();
        }
        SpinRequestPack.MergeFrom(other.SpinRequestPack);
      }
      if (other.spinResultListPack_ != null) {
        if (spinResultListPack_ == null) {
          SpinResultListPack = new global::SlotAceProtobuf.SpinResultListPack();
        }
        SpinResultListPack.MergeFrom(other.SpinResultListPack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestCode = (global::SlotAceProtobuf.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            ActionCode = (global::SlotAceProtobuf.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            ReturnCode = (global::SlotAceProtobuf.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (loginPack_ == null) {
              LoginPack = new global::SlotAceProtobuf.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 42: {
            if (userInfoPack_ == null) {
              UserInfoPack = new global::SlotAceProtobuf.UserInfoPack();
            }
            input.ReadMessage(UserInfoPack);
            break;
          }
          case 50: {
            if (spinRequestPack_ == null) {
              SpinRequestPack = new global::SlotAceProtobuf.SpinRequestPack();
            }
            input.ReadMessage(SpinRequestPack);
            break;
          }
          case 58: {
            if (spinResultListPack_ == null) {
              SpinResultListPack = new global::SlotAceProtobuf.SpinResultListPack();
            }
            input.ReadMessage(SpinResultListPack);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 註冊/登入包
  /// </summary>
  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      userId_ = other.userId_;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// 用戶Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Nickname" field.</summary>
    public const int NicknameFieldNumber = 2;
    private string nickname_ = "";
    /// <summary>
    /// 暱稱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用戶訊息包
  /// </summary>
  public sealed partial class UserInfoPack : pb::IMessage<UserInfoPack> {
    private static readonly pb::MessageParser<UserInfoPack> _parser = new pb::MessageParser<UserInfoPack>(() => new UserInfoPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack(UserInfoPack other) : this() {
      coin_ = other.coin_;
      freeSpin_ = other.freeSpin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoPack Clone() {
      return new UserInfoPack(this);
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 1;
    private int coin_;
    /// <summary>
    /// 用戶籌碼
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "FreeSpin" field.</summary>
    public const int FreeSpinFieldNumber = 2;
    private int freeSpin_;
    /// <summary>
    /// 免費輪轉次數
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeSpin {
      get { return freeSpin_; }
      set {
        freeSpin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Coin != other.Coin) return false;
      if (FreeSpin != other.FreeSpin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (FreeSpin != 0) hash ^= FreeSpin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coin);
      }
      if (FreeSpin != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeSpin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (FreeSpin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeSpin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoPack other) {
      if (other == null) {
        return;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.FreeSpin != 0) {
        FreeSpin = other.FreeSpin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Coin = input.ReadInt32();
            break;
          }
          case 16: {
            FreeSpin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 輪轉請求包
  /// </summary>
  public sealed partial class SpinRequestPack : pb::IMessage<SpinRequestPack> {
    private static readonly pb::MessageParser<SpinRequestPack> _parser = new pb::MessageParser<SpinRequestPack>(() => new SpinRequestPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpinRequestPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinRequestPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinRequestPack(SpinRequestPack other) : this() {
      betValue_ = other.betValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinRequestPack Clone() {
      return new SpinRequestPack(this);
    }

    /// <summary>Field number for the "BetValue" field.</summary>
    public const int BetValueFieldNumber = 1;
    private int betValue_;
    /// <summary>
    /// 下注值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BetValue {
      get { return betValue_; }
      set {
        betValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpinRequestPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpinRequestPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BetValue != other.BetValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BetValue != 0) hash ^= BetValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BetValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BetValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BetValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BetValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpinRequestPack other) {
      if (other == null) {
        return;
      }
      if (other.BetValue != 0) {
        BetValue = other.BetValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BetValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 輪轉盤面結果列表包
  /// </summary>
  public sealed partial class SpinResultListPack : pb::IMessage<SpinResultListPack> {
    private static readonly pb::MessageParser<SpinResultListPack> _parser = new pb::MessageParser<SpinResultListPack>(() => new SpinResultListPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpinResultListPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinResultListPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinResultListPack(SpinResultListPack other) : this() {
      spinResultList_ = other.spinResultList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinResultListPack Clone() {
      return new SpinResultListPack(this);
    }

    /// <summary>Field number for the "SpinResultList" field.</summary>
    public const int SpinResultListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SlotAceProtobuf.SpinResultPack> _repeated_spinResultList_codec
        = pb::FieldCodec.ForMessage(10, global::SlotAceProtobuf.SpinResultPack.Parser);
    private readonly pbc::RepeatedField<global::SlotAceProtobuf.SpinResultPack> spinResultList_ = new pbc::RepeatedField<global::SlotAceProtobuf.SpinResultPack>();
    /// <summary>
    /// 輪轉盤面結果列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SlotAceProtobuf.SpinResultPack> SpinResultList {
      get { return spinResultList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpinResultListPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpinResultListPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spinResultList_.Equals(other.spinResultList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spinResultList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spinResultList_.WriteTo(output, _repeated_spinResultList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spinResultList_.CalculateSize(_repeated_spinResultList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpinResultListPack other) {
      if (other == null) {
        return;
      }
      spinResultList_.Add(other.spinResultList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spinResultList_.AddEntriesFrom(input, _repeated_spinResultList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 輪轉結果包
  /// </summary>
  public sealed partial class SpinResultPack : pb::IMessage<SpinResultPack> {
    private static readonly pb::MessageParser<SpinResultPack> _parser = new pb::MessageParser<SpinResultPack>(() => new SpinResultPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpinResultPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinResultPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinResultPack(SpinResultPack other) : this() {
      spinResult_ = other.spinResult_.Clone();
      goldIndexList_ = other.goldIndexList_.Clone();
      winIndexList_ = other.winIndexList_.Clone();
      bigWildDataPackList_ = other.bigWildDataPackList_.Clone();
      winValue_ = other.winValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpinResultPack Clone() {
      return new SpinResultPack(this);
    }

    /// <summary>Field number for the "SpinResult" field.</summary>
    public const int SpinResultFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_spinResult_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> spinResult_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 輪轉盤面結果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpinResult {
      get { return spinResult_; }
    }

    /// <summary>Field number for the "GoldIndexList" field.</summary>
    public const int GoldIndexListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_goldIndexList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> goldIndexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 黃金牌位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GoldIndexList {
      get { return goldIndexList_; }
    }

    /// <summary>Field number for the "WinIndexList" field.</summary>
    public const int WinIndexListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_winIndexList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> winIndexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 中獎牌位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WinIndexList {
      get { return winIndexList_; }
    }

    /// <summary>Field number for the "BigWildDataPackList" field.</summary>
    public const int BigWildDataPackListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SlotAceProtobuf.BigWildDataPack> _repeated_bigWildDataPackList_codec
        = pb::FieldCodec.ForMessage(34, global::SlotAceProtobuf.BigWildDataPack.Parser);
    private readonly pbc::RepeatedField<global::SlotAceProtobuf.BigWildDataPack> bigWildDataPackList_ = new pbc::RepeatedField<global::SlotAceProtobuf.BigWildDataPack>();
    /// <summary>
    /// 大鬼牌資料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SlotAceProtobuf.BigWildDataPack> BigWildDataPackList {
      get { return bigWildDataPackList_; }
    }

    /// <summary>Field number for the "WinValue" field.</summary>
    public const int WinValueFieldNumber = 5;
    private int winValue_;
    /// <summary>
    /// 本輪贏得值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinValue {
      get { return winValue_; }
      set {
        winValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpinResultPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpinResultPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spinResult_.Equals(other.spinResult_)) return false;
      if(!goldIndexList_.Equals(other.goldIndexList_)) return false;
      if(!winIndexList_.Equals(other.winIndexList_)) return false;
      if(!bigWildDataPackList_.Equals(other.bigWildDataPackList_)) return false;
      if (WinValue != other.WinValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spinResult_.GetHashCode();
      hash ^= goldIndexList_.GetHashCode();
      hash ^= winIndexList_.GetHashCode();
      hash ^= bigWildDataPackList_.GetHashCode();
      if (WinValue != 0) hash ^= WinValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      spinResult_.WriteTo(output, _repeated_spinResult_codec);
      goldIndexList_.WriteTo(output, _repeated_goldIndexList_codec);
      winIndexList_.WriteTo(output, _repeated_winIndexList_codec);
      bigWildDataPackList_.WriteTo(output, _repeated_bigWildDataPackList_codec);
      if (WinValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WinValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spinResult_.CalculateSize(_repeated_spinResult_codec);
      size += goldIndexList_.CalculateSize(_repeated_goldIndexList_codec);
      size += winIndexList_.CalculateSize(_repeated_winIndexList_codec);
      size += bigWildDataPackList_.CalculateSize(_repeated_bigWildDataPackList_codec);
      if (WinValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpinResultPack other) {
      if (other == null) {
        return;
      }
      spinResult_.Add(other.spinResult_);
      goldIndexList_.Add(other.goldIndexList_);
      winIndexList_.Add(other.winIndexList_);
      bigWildDataPackList_.Add(other.bigWildDataPackList_);
      if (other.WinValue != 0) {
        WinValue = other.WinValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            spinResult_.AddEntriesFrom(input, _repeated_spinResult_codec);
            break;
          }
          case 18:
          case 16: {
            goldIndexList_.AddEntriesFrom(input, _repeated_goldIndexList_codec);
            break;
          }
          case 26:
          case 24: {
            winIndexList_.AddEntriesFrom(input, _repeated_winIndexList_codec);
            break;
          }
          case 34: {
            bigWildDataPackList_.AddEntriesFrom(input, _repeated_bigWildDataPackList_codec);
            break;
          }
          case 40: {
            WinValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大鬼牌資料包
  /// </summary>
  public sealed partial class BigWildDataPack : pb::IMessage<BigWildDataPack> {
    private static readonly pb::MessageParser<BigWildDataPack> _parser = new pb::MessageParser<BigWildDataPack>(() => new BigWildDataPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigWildDataPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SlotAceProtobuf.SlotAceProtobufReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigWildDataPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigWildDataPack(BigWildDataPack other) : this() {
      mainIndex_ = other.mainIndex_;
      copyIndexList_ = other.copyIndexList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigWildDataPack Clone() {
      return new BigWildDataPack(this);
    }

    /// <summary>Field number for the "MainIndex" field.</summary>
    public const int MainIndexFieldNumber = 1;
    private int mainIndex_;
    /// <summary>
    /// 主卡位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainIndex {
      get { return mainIndex_; }
      set {
        mainIndex_ = value;
      }
    }

    /// <summary>Field number for the "CopyIndexList" field.</summary>
    public const int CopyIndexListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_copyIndexList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> copyIndexList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 複製位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CopyIndexList {
      get { return copyIndexList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigWildDataPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigWildDataPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainIndex != other.MainIndex) return false;
      if(!copyIndexList_.Equals(other.copyIndexList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MainIndex != 0) hash ^= MainIndex.GetHashCode();
      hash ^= copyIndexList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MainIndex);
      }
      copyIndexList_.WriteTo(output, _repeated_copyIndexList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainIndex);
      }
      size += copyIndexList_.CalculateSize(_repeated_copyIndexList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigWildDataPack other) {
      if (other == null) {
        return;
      }
      if (other.MainIndex != 0) {
        MainIndex = other.MainIndex;
      }
      copyIndexList_.Add(other.copyIndexList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MainIndex = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            copyIndexList_.AddEntriesFrom(input, _repeated_copyIndexList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
